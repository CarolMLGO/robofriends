{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","width","height","src","concat","CardList","robots","map","robot","i","components_Card","key","SearchBox","searchfield","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","border","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,MAAM,MAAMC,OAAO,MAAMC,IAAG,wBAAAC,OAA0BT,KACxEC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCaOW,EAlBE,SAAAb,GAAgB,IAAbc,EAAad,EAAbc,OAEnB,OACCV,EAAAC,EAAAC,cAAA,WAEEQ,EAAOC,IAAI,SAACC,EAAMC,GACjB,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CACPC,IAAKF,EACLd,GAAIa,EAAMb,GACVF,KAAMe,EAAMf,KACZC,MAAOc,EAAMd,YCDHkB,EAVG,SAAApB,GAAmCA,EAAhCqB,YAAgC,IAAnBC,EAAmBtB,EAAnBsB,aACjC,OACClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kCAAkCgB,KAAK,SACxDC,SAAUF,EACVG,YAAY,oBCGAC,EARA,SAACC,GACf,OACCvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,UAAU,SAASC,OAAO,mBAAoBpB,OAAO,UAChEiB,EAAMI,WCiBKC,cAnBd,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMT,KACDa,MAAQ,CAACC,UAAS,GAFLR,iFAKDS,EAAMC,GACvBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SAERrC,EAAAC,EAAAC,cAAA,qCAGA8B,KAAKT,MAAMI,gBAhBQc,aCyDbC,qBAjDd,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACbb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAiBDW,eAAiB,SAACC,GACjBf,EAAKW,SAAS,CAAEvB,YAAa2B,EAAMC,OAAOC,SAjB1CjB,EAAKO,MAAQ,CACZ1B,OAAO,GACPO,YAAY,IAJAY,mFAQM,IAAAkB,EAAAf,KACnBgB,MAAM,8CACLC,KAAK,SAAAC,GACL,OAAOA,EAASC,SAEhBF,KAAK,SAAAG,GACLL,EAAKP,SAAS,CAAE9B,OAAO0C,uCASf,IAAAC,EACoBrB,KAAKI,MAA3B1B,EADE2C,EACF3C,OAAOO,EADLoC,EACKpC,YACRqC,EAAiB5C,EAAO6C,OAAQ,SAAA3C,GACrC,OAAOA,EAAMf,KAAK2D,cAAcC,SAASxC,EAAYuC,iBAGtD,OAAK9C,EAAOgD,OAIV1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACyD,EAAD,CAAWzC,aAAcc,KAAKW,iBAC9B3C,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAAC2D,EAAD,KACD7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUpD,OAAS4C,OARbtD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBA/BQsC,cCCEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OACRrE,EAAAC,EAAAC,cAACoE,EAAD,MACAC,SAASC,eAAe,SDgHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.d574452d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robots' width=\"200\" height=\"200\" src={`https://robohash.org/${id}`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot,i)=>{\r\n\t\t\t\t\treturn <Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robot.id} \r\n\t\t\t\t\tname={robot.name} \r\n\t\t\t\t\temail={robot.email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input className=\"pa3 ba b--gree bg-lightest-blue\" type='search' \r\n\t\t\tonChange={searchChange}\r\n\t\t\tplaceholder=\"search robots\"/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',border:'1px solid yellow', height:'600px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {hasError:false};\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\r\n\t\treturn <h1> Something went wrong. </h1>\t\r\n\t\t}\r\n\t\t\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield:''\r\n\t\t} //state is something that can change\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(users => {\r\n\t\t\tthis.setState({ robots:users });\r\n\t\t})\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}//any time making my own methods, using arrow functions, make sure that this belongs to \r\n\t//where it was created, in this case, App\r\n\r\n\trender () {\r\n\t\tconst {robots,searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (!robots.length) {\r\n\t\t\treturn <h1 className='tc'>Loading</h1>\r\n\t\t} else {\r\n\t\treturn (\r\n\t\t  <div className='tc'>\r\n\t\t\t<h1 className='f1'>RobotFriends</h1> \r\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t  <ErrorBoundary>\r\n\t\t\t\t<CardList robots= {filteredRobots} />\r\n\t\t\t  </ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t  </div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\n}\r\n\t\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}